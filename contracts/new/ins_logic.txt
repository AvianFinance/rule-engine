// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4; 

import @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol;
import @openzeppelin/contracts/security/ReentrancyGuard.sol;
import @openzeppelin/contracts/utils/structs/EnumerableSet.sol;
import @openzeppelin/contracts/interfaces/IERC721.sol;
import ./IERC4907.sol;
import @openzeppelin/contracts/utils/Counters.sol;

error PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);
error ItemNotForSale(address nftAddress, uint256 tokenId);
error NotListed(address nftAddress, uint256 tokenId);
error AlreadyListed(address nftAddress, uint256 tokenId);
error NoProceeds();
error NotOwner();
error NotApprovedForMarketplace();
error PriceMustBeAboveZero();

contract AvianInsExchange is ReentrancyGuard { 

	using Counters for Counters.Counter;
	using EnumerableSet for EnumerableSet.AddressSet;
	using EnumerableSet for EnumerableSet.UintSet;

	struct Listing_installment {address owner;address user;address nftContract;uint256 tokenId;uint256 pricePerDay;uint256 expires;uint64 installmentIndex; uint256 paidIns;}

	event INSNFTListed(address indexed owner,address indexed user,address indexed nftContract,uint256 tokenId,uint256 pricePerDay);
	event NFTINSPaid(address indexed owner,address indexed user,address indexed nftContract,uint256 tokenId,uint64 expires,uint64 insCount,uint64 insIndex,uint256 insAmount,uint256 totalPaid);
	event NFTUnlisted(address indexed unlistSender,address indexed nftContract,uint256 indexed tokenId);

	modifier notIListed(address nftAddress, uint256 tokenId) {
		Listing_installment memory listing = i_listings[nftAddress][tokenId];
		if (listing.pricePerDay > 0) {
		    revert AlreadyListed(nftAddress, tokenId);
		}
		_;
	}

	modifier isIListed(address nftAddress, uint256 tokenId) {
		Listing_installment memory listing = i_listings[nftAddress][tokenId];
		if (listing.pricePerDay <= 0) {
		    revert NotListed(nftAddress, tokenId);
		}
		_;
	}

	modifier isOwner(address nftAddress,uint256 tokenId,address spender) {
		IERC721 nft = IERC721(nftAddress);
		address owner = nft.ownerOf(tokenId);
		if (spender != owner) {
		  revert NotOwner();
		}
		_;
	}


	// state variables to match as in the proxy context (order should be maintained)

	address private _marketOwner;

	uint256 private _listingFee = .01 ether;

	uint64 private _maxInstallments = 10;

	mapping(address => mapping(uint256 => Listing_installment)) private i_listings;

	mapping(address => EnumerableSet.UintSet) private i_address_tokens;

	EnumerableSet.AddressSet private i_address;

	Counters.Counter private i_listed;


	constructor() {
		_marketOwner = msg.sender;
	}


	function listInsBasedNFT(address nftAddress, uint256 tokenID, uint256 pricePerDay) public payable
		nonReentrant
		notiListed(nftAddress, tokenId)
	returns(string memory){
		require(isRentableNFT(nftAddress),'Contract is not an ERC4907');
		require(IERC721(nftAddress).ownerOf(tokenId) == msg.sender,'Not owner of nft');
		require(msg.value == _listingFee,'Not enough ether for listing fee');
		require(pricePerDay > 0,'Rental price should be greater than 0');
	
		IERC721 nft = IERC721(nftAddress);
		if (nft.getApproved(tokenID) != address(this)) {
		    revert NotApprovedForMarketplace();
		}

		payable(_marketOwner).transfer(_listingFee);

		i_listings[nftAddress][tokenID] = Listing_sell(msg.sender , address(0),nftAddress,tokenID,pricePerDay0);
		i_listed.increment();
		EnumerableSet.add(i_address_tokens[nftAddress],tokenID);
		EnumerableSet.add(i_address,nftAddress);

		emit INSNFTListed(IERC721(nftAddress).ownerOf(tokenId), address(0), nftAddress, tokenId, pricePerDay);;

		returns('Successfully listed the NFT for installment based rentals');
	}

	function unlistNFT(address nftAddress, uint256 tokenId) public
		isOwner(nftAddress, tokenId, msg.sender)
		isSListed(nftAddress, tokenId)
	returns(string memory){
	
		EnumerableSet.remove(i_address_tokens[nftAddress],tokenID);

		delete i_listings[nftAddress][tokenID];
		if (EnumerableSet.length(i_address_tokens[nftAddress]) == 0) {
		    EnumerableSet.remove(i_address,nftAddress);
		}
		i_listed.decrement();

		emit NFTUnlisted(msg.sender, nftAddress, tokenId);;

		returns('Successfully removed the listing');
	}

	function rentINSNFT(address nftAddress, uint256 tokenId, uint64 numDays) public payable
		nonReentrant
	returns(string memory){
	
		emit NFTINSPaid(IERC721(nftContract).ownerOf(tokenId), msg.sender, nftContract, tokenId, expires, numDays, 1, firstIns, firstIns);;

		returns('Successfully rented the nft by paying the first installment');
	}

	function calculateInstallment(uint256 totalPaid, uint256 installmentCount, uint256 pricePerDay, uint64 installmentIndex) public pure
	returns(uint256){
		require(installmentIndex <= installmentCount,'Installment Index should be lesser than the installment count');
		require(installmentIndex > 0,'Installment Index should be greater than 0');
	
		uint256 rentalFee =pricePerDay*installmentCount;
		uint256 installment_amount;
		uint sum = (installmentCount*(installmentCount+1))/2;
		uint256 unit_price = rentalFee/sum;
		if (installmentIndex<installmentCount){
		installment_amount = unit_price*(installmentCount-installmentIndex+1);
		} else if (installmentIndex==installmentCount){
		 installment_amount = rentalFee -totalPaid;
		}
		returns(installment_amount);
	}

	function payNFTIns(address nftContract, uint256 tokenId) public payable
		nonReentrant
	returns(string memory){
	
		emit NFTINSPaid(IERC721(nftContract).ownerOf(tokenId), msg.sender, nftContract, tokenId, expires, listing.installmentCount, nextIndex, nextIns, totalPaid);;

		returns('Successfully paid the installment');
	}

	function isNFT(address nftContract) public view
	returns(bool){
	
		bool _isNFT = false;
		try IERC165(nftContract).supportsInterface(type(IERC721).interfaceId) returns (bool nft) {
		    _isNFT = nft;
		} catch {
		   return false;
		}
		returns(_isNFT);
	}


} 

